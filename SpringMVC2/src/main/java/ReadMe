什么是SpringMVC:(前三点是最重要的!!!!)
	基于MVC模式的一个框架,解决了web开发中常见的一些问题,并且与Spring无缝集成
		1：接收参数
			直接接受模型对象
		2：返回参数
		  	1：如果返回页面内容的同时需要跳转到指定页面就使用：使用servlet原生API 或ModelAndViwe
			2：如果返回页面内容不需要跳转页面(异步请求)使用@ResponseBody	
		3：页面跳转
			1：使用ModelAndViwe进行页面跳转
			2：直接返回字符串,springMVC会自动找到对应视图。
		4：文件上传
		5：国际化	
		6：表单校验等等。。。
			tomcat
			web.xml
请求			DispatcherServlet(读取springMVC配置文件)		请求分发器
			请求交给我们配置在xml中类进行处理。
			
如果没有指定springMVC配置文件的位置的话,默认会在WEB-INF寻找SpringMVC-servlet.xml
使用<load-on-startup>1</load-on-startup>指定DispatcherServlet实例化的时机。		

URL映射的方式：
	1：在xml中配置bean,name指定为url映射路径,class为处理对应请求路径的类,该类需要实现controller
	接口,默认使用handleRequest方法处理请求。缺点：类中只有一个方法能处理请求
	
	2：使用@Controller修饰类然后使用 @RequestMapping("/hello2")修饰在方法上 来表示请求路径,当请求这个路径的时候
	会自动调用被其修饰的方法,但是方法中需要有请求与响应对象(必须),用来给客户端返回响应结果。
	@RequestMapping如果修饰在类上,代表：此类下所有的requestMapping路径前面都会加上/user的路径
	
SpringMVC传参的4中方式：
	方式一：使用原生servlet API进行接收	
	
	方式二：形参列表形式接收
	要求：形参名称需要与jsp页面name保持一致,要不然不知道需要接收那个input的参数(同名匹配原则),
		  如果真的不想同名匹配的话,可以使用@RequestParam("username")注解将指定input输入框中的值注入
		  到其后面的形参中。(注解中写的是input的name)
	优点：对比起ServletAPI 来讲,代码简化很多, 并且做到了自动的类型转换
	缺点：如果需要接收参数过多的情况,形参列表会超级长,代码观赏性较差。
	
	方式三：形参列表 模型接收 ,将前端传过来的参数封装成对应的model 类对象,然后注入到形参当中。
	
	方式四：地址栏接收, 类似Restful风格
	
SpringMVC静态资源的支持：
	在web应用中我们所有的静态资源都是由tomcat的default Servlet处理的,这个servlet的映射路径
	为\,与我们DispatcherServlet的配置路径相同,所以我们配置的servlet会覆盖掉tomcat的default
	
	Servlet。
	解决方式一：web.xml 不要配置\,
	解决方式二：在springmvc.xml中使用<mvc:default-servlet-handler/>开启静态支持
				(需要同时开启MVC注解支持<mvc:annotation-driven />)

拦截器: Interceptor
过滤器与拦截器的区别:
1: 过滤器默认会拦截所有(jsp,html等)而拦截器如果配置成/**的话不拦截jsp,会拦截html,js等.
2: 过滤器只有在执行servlet之前进行调用,拦截器能过深入到方法的前后所有弹性较大
3: 过滤器是基于函数回调实现,拦截器是基于反射实现
4: 过滤器无法访问controller值栈中的值,而拦截器可以
5: 过滤器在一次请求中只执行一次,而拦截器执行了多次
6: 过滤器需要在servlet容器中进行实现,而拦截器不依赖于servlet容器.


SpringMVC的请求流程
1:  用户发送到tomact
2:  tomact将符合DispatcherServlet拦截路径的请求转交给DispatcherServlet(前端控制器)进行处理
3:  前端控制器去请求HanderMapping查找Handler(根据xml配置以及注解进行查找操作)
4:  处理器映射器(HandlerMapping)会将请求映射为HandlerExecutionChain对象(包含有Handler以及多个拦截(interceptor)器对象)返回给前端控制器
5:  前端控制器调用处理器适配器(HandlerAdapter)来执行Handler
6:  Handler执行完后返回给处理器适配器(HandlerAdapter) 一个ModelAndView
7:  HandlerAdapter将ModelAndView返回给前端控制器
8:  前端控制器 请求视图解析器进行视图进行(将逻辑视图转成真实视图)
9:  视图解析器返回View给前端控制器
10: 前端控制器对视图进行渲染(将返回给前端的数据放到页面的requst作用域中)
11: 前端控制器向用户响应

文件上传:
 如果服务器想接受客户端上传的文件必须要知道:
 	1: 文件的类型
 	2: 文件的大小
 	3: 文件的名称	
1:由于以上三点Java中的File都无法提供file 无法描述一个文件上传需要的信息,所以我们选择MultipartFile
作为我们文件上传的参数.

2: 文件上传需要制定表单提交方式为post,并且指定entype="multipart/form-data".

